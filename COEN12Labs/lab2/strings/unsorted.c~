#include <stdio.h>
#include <string.h>
#include <assert.h>
typedef struct set {
    int count;
    int length;
    char **data;
} SET;

int search(SET *sp, char *elt, bool *found);

SET *createSet(int maxElts) {
    SET *sp;
    sp = malloc(sizeof(SET));
    assert(sp != NULL);
    sp->count = 0;
    sp->length = maxElts;
    sp->data = malloc(sizeof(char*)*maxElts);
    assert(sp->data!=NULL);
    return sp;
}

void destroySet(SET *sp) {
    assert(sp != NULL);
    int i;
    for(i = 0; i<sp->count; i++) {
	free(sp->data[i]);
    }
    free(sp->data);
    free(sp);
}

int numElements(SET *sp) {
    return sp->count;
}

void addElement(SET *sp, char *elt) {
    if(findElement(sp, elt) != NULL) {
	sp->data[sp->count] = malloc((strlen(elt)+1)*sizeof(char));
	assert(sp != NULL);
	strcpy(sp->data[sp->count], elt);
	sp->count += 1;
    }
}

void removeElement(SET *sp, char *elt) {
    bool found = false;
    int i = search(sp, elt, found);
    if(found == true) {
	free(sp->data[i]);
	strcpy(sp->data[i], sp->data[sp->count]);
	sp->count -= 1;
    }
}

char *findElement(SET *sp, char *elt) {
    bool found = false;
    int i = search(sp, elt, found);
    if(found == true) {
	return sp->data[i];
    } else {
	return NULL;
    }
}

char **getElements(SET *sp) {
    char **arr[sp->count];
    int i;
    for(i = 0; i < sp->count; i++) {
	memcpy(arr, sp->data[i], strlen(sp->data[i])+1);
    }
    return arr;
}

static int search(SET *sp, char *elt, bool *found) {
    int i;
    for(i = 0; i < sp->count; i++) {
	if(strcmp(elt, sp->data[i] == 0)) {
	    found = true;
	    return i;
	    break;
	}
    }
}
